package saas.winbons.dubbo.service;

import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.reflect.MethodUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import saas.winbons.dubbo.api.ApiService;
import saas.winbons.dubbo.api.FilterDTO;
import saas.winbons.dubbo.api.RequestDTO;
import saas.winbons.dubbo.api.ResultDTO;
import saas.winbons.dubbo.api.SortDTO;
import saas.winbons.framework.tools.ToolSqlXml;

import com.alibaba.fastjson.JSON;
import com.jfinal.i18n.I18n;

public abstract class BaseService implements ApiService {
	
	protected final Logger LOG = LoggerFactory.getLogger(BaseService.class);

	@Override
	public ResultDTO executeDto(RequestDTO requestDTO) {
		ResultDTO resultDTO = new ResultDTO();
		resultDTO.setSuccess(false);
		long nanoTime = System.nanoTime();
		try {
			return (ResultDTO) MethodUtils.invokeMethod(getService(), requestDTO.getMethod(), requestDTO);
			/*
			if(requestDTO.getContextDTO().isMobileRequest()){
				try{
					ResultDTO result =  (ResultDTO) MethodUtils.invokeMethod(getService(), requestDTO.getMethod() + "ByMobile", requestDTO);
					return result;
				}catch (NoSuchMethodException e) {
					return (ResultDTO) MethodUtils.invokeMethod(getService(), requestDTO.getMethod(), requestDTO);
				}
				
			}else{
				return (ResultDTO) MethodUtils.invokeMethod(getService(), requestDTO.getMethod(), requestDTO);
			}*/
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
			resultDTO.setError(e.getMessage());
		} catch (IllegalAccessException e) {
			e.printStackTrace();
			resultDTO.setError(e.getMessage());
		} catch (InvocationTargetException e) {
			e.printStackTrace();
			resultDTO.setError(e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			resultDTO.setError(e.getMessage());
		}finally{
			LOG.warn("------- 完成请求: URL={}, 花费时间(毫秒)={}, 租户ID={}, 登录账号={}, 参数={}--------", new Object[] {
					getService().getClass().getSimpleName() + "_" + requestDTO.getMethod(),
					(nanoTime - System.nanoTime()) / 1000000,
					requestDTO.getContextDTO().getDbId(),
					requestDTO.getContextDTO().getUserId(),
					JSON.toJSONString(requestDTO),
					}
			);
		}
		return resultDTO;
	}
	
	
	
	public abstract AbstractCommonService getService();
	
	 /**
     * 获取SQL，动态SQL，使用Beetl解析
     * @param sqlId
     * @param param
     * @return
     */
	public String getSqlByBeetl(String sqlId, Map<String, Object> param){
    	return ToolSqlXml.getSql(sqlId, param);
    }
	
	 /**
     * 获取SQL，动态SQL，使用Beetl解析
     * @param sqlId
     * @param param
     * @return
     */
	public String getSqlByBeetl(String sqlId,String tableName, FilterDTO[] filters,SortDTO[] sorts){
		Map<String, Object> param = new HashMap<String, Object>();
		param.put("filters", filters);
		param.put("sorts", sorts);
    	return ToolSqlXml.getSql(sqlId, param);
    }
	
	
	 /**
     * 获取SQL，动态SQL，使用Beetl解析
     * @param sqlId
     * @param param
     * @return
     */
	public String getSqlByBeetl(String sqlId){
    	return ToolSqlXml.getSql(sqlId);
    }
	
	public String getIl8nMessage(String message){
		try{
			return I18n.use().get(message);
		}catch(Exception e){
			
		}
		return "";
	}
	

}
