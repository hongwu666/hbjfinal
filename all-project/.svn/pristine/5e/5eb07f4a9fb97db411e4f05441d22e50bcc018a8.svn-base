package saas.winbons.framework.utils;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;

/**
 * 时间工具类
 * @author wlf
 *
 */
public class CrmDateUtils {
	
	private static final String defaultPattern = "yyyy-MM-dd";
	private static final String minPattern = defaultPattern+" 00:00:00";
	private static final String maxPattern = defaultPattern+" 23:59:59";
	private static final String standPattern = "yyyy-MM-dd HH:mm:ss";
	
	/** 锁对象 */
	private static final Object lockObj = new Object();
	private static Map<String, ThreadLocal<SimpleDateFormat>> sdfMap = new HashMap<String, ThreadLocal<SimpleDateFormat>>();
	
	/**
	 * 通过类型获取时间
	 * @param type
	 * @param isStart
	 * @return
	 */
	public static Date getDateByType(String type, boolean isStart){
		Calendar cal = buildCalendarByType(type, isStart);
		return buildDateFromCalendar(cal, isStart);
	}
	
	/**
	 * 通过类型获取时间
	 * @param type
	 * @param isStart
	 * @return
	 */
	public static Date getDateByType(int type, boolean isStart){
		Calendar cal = buildCalendarByType(type, isStart);
		return buildDateFromCalendar(cal, isStart);
	}
	
	public static Date getDateForFiscalSession(Calendar calendar, int currMonth, boolean isStart){
		Calendar cal = null;
		if(isStart){
			cal = getFirstDayOfFiscalSession(calendar, currMonth);
		} else {
			cal = getLastDayOfFiscalSession(calendar, currMonth);
		}
		
		if(cal != null){
			DateTime dt = buildDateTimeFromCalendar(cal, isStart);
			return dt.toDate();
		}
		return null;
	}
	
	public static Calendar buildCalendarByType(int type, boolean isStart) {
		Calendar cal = Calendar.getInstance();
		switch (type) {
		case 0:
			break;
		case 1:
			if(isStart){
				cal = getFirstDayOfWeek();
			} else {
				cal = getLastDayOfWeek();
			}
			break;
		case 2:
			if(isStart){
				cal = getFirstDayOfMonth();
			} else {
				cal = getLastDayOfMonth();
			}
			break;
		case 3:
			if(isStart){
				cal = getFirstDayOfSession();
			} else {
				cal = getLastDayOfSession();
			}
			break;
		case 4:
			int year = cal.get(Calendar.YEAR);
			if(isStart){
				cal = getFirstDayOfYear(year);
			} else {
				cal = getLastDayOfYear(year);
			}
			break;
		case 5:
			cal.setFirstDayOfWeek(Calendar.MONDAY);  // 设置星期一为每周的起点
			cal.add(Calendar.WEEK_OF_MONTH, -1);
			if(isStart){
				cal.set(Calendar.DAY_OF_WEEK, 2);
			} else {
				cal.set(Calendar.DAY_OF_WEEK, 1);
			}
			break;
		case 6:
			if(isStart){
				cal.add(Calendar.MONTH, -1);
				cal.set(Calendar.DAY_OF_MONTH, 1);
			} else {
				cal.set(Calendar.DAY_OF_MONTH, 1);
				cal.add(Calendar.DAY_OF_MONTH, -1);
			}
			break;
		case 7:

			break;
		case 8:

			break;
		default:
			cal = null;
		}
		return cal;
	}
	
	public static Calendar buildCalendarByType(String type, boolean isStart){
		return buildCalendarByType(convertStringTypeToIntType(type), isStart);
	}
	
	private static int convertStringTypeToIntType(String type){
		int newType = -1;
		if("today".equals(type) || "day".equals(type)){
			newType = 0;
		}
		else if("thizWeek".equals(type) || "week".equals(type)){
			newType = 1;
		} else if("thizMonth".equals(type) || "month".equals(type)){
			newType = 2;
		} else if("thizSession".equals(type) || "session".equals(type)){
			newType = 3;
		} else if("thizYear".equals(type) || "year".equals(type)){
			newType = 4;
		} else if("lastWeek".equals(type)){
			newType = 5;
		} else if("lastMonth".equals(type)){
			newType = 6;
		} else if("lastSession".equals(type)){
			newType = 7;
		} else if("lastYear".equals(type)){
			newType = 8;
		}  
		return newType;
	}
	
	private static DateTime buildDateTimeFromCalendar(Calendar cal, boolean isStart){
		if(cal == null){
			return null;
		}
		int currYear = cal.get(Calendar.YEAR);
		int currMonth = cal.get(Calendar.MONTH) + 1;
		int currDay = cal.get(Calendar.DAY_OF_MONTH);
		DateTime dt = null;
		if(isStart){
			dt = new DateTime(currYear, currMonth, currDay, 0, 0, 0, 0);
		} else {
			dt = new DateTime(currYear, currMonth, currDay, 23, 59, 59, 0);
		}
		return dt;
	}
	
	public static Date buildDateFromCalendar(Calendar cal, boolean isStart){
		DateTime dt = buildDateTimeFromCalendar(cal, isStart);
		if(dt != null){
			return dt.toDate();
		}
		return null;
	}
	
	public static long buildMillisFromCalendar(Calendar cal, boolean isStart){
		DateTime dt = buildDateTimeFromCalendar(cal, isStart);
		if(dt != null){
			return dt.getMillis();
		}
		return -1l;
	}
	
	/**
	 * 获取本周第一天
	 * @return
	 */
	public static Calendar getFirstDayOfWeek() {
		Calendar calendar = Calendar.getInstance();
		calendar.setFirstDayOfWeek(Calendar.MONDAY);
		calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		return calendar;
	}
	
	/**
	 * 获取本周最后一天
	 * @return
	 */
	public static Calendar getLastDayOfWeek() {
		Calendar calendar = Calendar.getInstance();
		calendar.setFirstDayOfWeek(Calendar.MONDAY);
		calendar.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
		return calendar;
	}
	
	/**
	 * 获取本月第一天
	 * @return
	 */
	public static Calendar getFirstDayOfMonth() {
		Calendar calendar = Calendar.getInstance();
		calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMinimum(Calendar.DAY_OF_MONTH));
		return calendar;
	}
	
	/**
	 * 获取本月最后一天
	 * @return
	 */
	public static Calendar getLastDayOfMonth() {
		Calendar calendar = Calendar.getInstance();
		calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
		return calendar;
	}
	
	/**
	 * 获取本季度第一天
	 * @return
	 */
	public static Calendar getFirstDayOfSession() {
		Calendar calendar = Calendar.getInstance();
		int currentMonth = calendar.get(Calendar.MONTH) + 1;
		if (currentMonth >= 1 && currentMonth <= 3){
			calendar.set(Calendar.MONTH, 0);
		} else if (currentMonth >= 4 && currentMonth <= 6){
			calendar.set(Calendar.MONTH, 3);
		} else if (currentMonth >= 7 && currentMonth <= 9){
			calendar.set(Calendar.MONTH, 6);
		} else if (currentMonth >= 10 && currentMonth <= 12){
			calendar.set(Calendar.MONTH, 9);
		}
		calendar.set(Calendar.DATE, 1);
		return calendar;
	}
	
	/**
	 * 获取本季度最后一天
	 * 
	 * @return
	 */
	public static Calendar getLastDayOfSession() {
		Calendar calendar = Calendar.getInstance();
		int currentMonth = calendar.get(Calendar.MONTH) + 1;
		if (currentMonth >= 1 && currentMonth <= 3) {
			calendar.set(Calendar.MONTH, 2);
			calendar.set(Calendar.DATE, 31);
		} else if (currentMonth >= 4 && currentMonth <= 6) {
			calendar.set(Calendar.MONTH, 5);
			calendar.set(Calendar.DATE, 30);
		} else if (currentMonth >= 7 && currentMonth <= 9) {
			calendar.set(Calendar.MONTH, 8);
			calendar.set(Calendar.DATE, 30);
		} else if (currentMonth >= 10 && currentMonth <= 12) {
			calendar.set(Calendar.MONTH, 11);
			calendar.set(Calendar.DATE, 31);
		}
		return calendar;
	}
	
	/**
	 * 获取财年季度第一天
	 * @param calendar		日历对象
	 * @param fiscalMonth	当前日期对应的财年月份
	 * @return
	 */
	public static Calendar getFirstDayOfFiscalSession(Calendar calendar, int fiscalMonth) {
		if(fiscalMonth % 3 == 0){
			calendar.add(Calendar.MONTH, -2);
		} else {
			switch(fiscalMonth){
			case 2:
			case 5:
			case 8:
			case 11:
				calendar.add(Calendar.MONTH, -1);
				break;
			case 1:
			case 4:
			case 7:
			case 10:
				break;
			default:
				calendar = null;
			}
		}
		if(calendar != null){
			calendar.set(Calendar.DATE, 1);
		}
		return calendar;
	}
	
	/**
	 * 获取财年季度最后一天
	 * @param calendar		日历对象
	 * @param fiscalMonth	当前日期对应的财年月份
	 * @return
	 */
	public static Calendar getLastDayOfFiscalSession(Calendar calendar, int fiscalMonth) {
		if(fiscalMonth % 3 == 0){
			calendar.add(Calendar.MONTH, 1);
		} else {
			switch(fiscalMonth){
			case 2:
			case 5:
			case 8:
			case 11:
				calendar.add(Calendar.MONTH, 2);
				break;
			case 1:
			case 4:
			case 7:
			case 10:
				calendar.add(Calendar.MONTH, 3);
				break;
			default:
				calendar = null;
			}
		}
		if(calendar != null){
			calendar.set(Calendar.DATE, 1);
			calendar.add(Calendar.DATE, -1);
		}
		return calendar;
	}
	
	/** 
     * 获取某年第一天
     * 
     * @return 
     */  
    public static Calendar getFirstDayOfYear(int year){  
    	Calendar calendar = Calendar.getInstance();  
        calendar.clear();  
        calendar.set(Calendar.YEAR, year);
        return calendar;
    }  
    
    /**
     * 获取某年最后一天
     * @return
     */
    public static Calendar getLastDayOfYear(int year){
    	Calendar calendar = Calendar.getInstance();
    	calendar.clear();  
        calendar.set(Calendar.YEAR, year);  
        calendar.roll(Calendar.DAY_OF_YEAR, -1);
        return calendar;  
    }
    
    public static Date getSpecifyDayMinDate(Date d) throws ParseException {
		String fd = getSdf(minPattern).format(d);
		return getSdf(standPattern).parse(fd);
	}

	public static Date getSpecifyDayMaxDate(Date d) throws ParseException {
		String fd = getSdf(maxPattern).format(d);
		return getSdf(standPattern).parse(fd);
	}
	
	private static SimpleDateFormat getSdf(final String pattern) {
		ThreadLocal<SimpleDateFormat> tl = sdfMap.get(pattern);
		// 此处的双重判断和同步是为了防止sdfMap这个单例被多次put重复的sdf
		if (tl == null) {
			synchronized (lockObj) {
				tl = sdfMap.get(pattern);
				if (tl == null) {
					// 只有Map中还没有这个pattern的sdf才会生成新的sdf并放入map
					// 这里是关键,使用ThreadLocal<SimpleDateFormat>替代原来直接new
					// SimpleDateFormat
					tl = new ThreadLocal<SimpleDateFormat>() {

						@Override
						protected SimpleDateFormat initialValue() {
							return new SimpleDateFormat(pattern);
						}
					};
					sdfMap.put(pattern, tl);
				}
			}
		}

		return tl.get();
	}
	
	public static Date getCurDayMaxDate() throws ParseException {
		Date d = new Date();
		String fd = getSdf(maxPattern).format(d);
		return getSdf(standPattern).parse(fd);
	}
	public static Date getCurDayMinDate() throws ParseException {
		Date d = new Date();
		String fd =getSdf(minPattern).format(d);
		return getSdf(standPattern).parse(fd);
	}
	public static Date getLastDayMinDate() throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, -1);
		String yesterday = getSdf(minPattern).format(cal.getTime());
		return getSdf(standPattern).parse(yesterday);
	}

	public static Date getLastDayMaxDate() throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, -1);
		String yesterday = getSdf(maxPattern).format(cal.getTime());
		return getSdf(standPattern).parse(yesterday);
	}
	/***
	 * 获取本周的开始时间
	 * 
	 * @return
	 * @throws ParseException
	 */
	public static Date getCurWeekMinDate() throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		String sd = getSdf(minPattern).format(cal.getTime());
		return getSdf(standPattern).parse(sd);
	}

	public static Date getCurWeekMaxDate() throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
		cal.add(Calendar.WEEK_OF_YEAR, 1);
		String sd = getSdf(maxPattern).format(cal.getTime());
		return getSdf(standPattern).parse(sd);
	}

	public static Date getLastWeekMinDate() throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
		cal.add(Calendar.WEEK_OF_YEAR, -1);
		String sd = getSdf(minPattern).format(cal.getTime());
		return getSdf(standPattern).parse(sd);
	}

	public static Date getLastWeekMaxDate() throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
		String sd = getSdf(maxPattern).format(cal.getTime());
		return getSdf(standPattern).parse(sd);
	}

	public static Date getCurMonthMinDate() throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DATE, cal.getActualMinimum(Calendar.DATE));
		;
		String sd = getSdf(minPattern).format(cal.getTime());
		return getSdf(standPattern).parse(sd);
	}

	public static Date getCurMonthMaxDate() throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DATE));
		;
		String sd = getSdf(maxPattern).format(cal.getTime());
		return getSdf(standPattern).parse(sd);
	}

	public static Date getLastMonthMinDate() throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DATE, cal.getActualMinimum(Calendar.DATE));
		cal.add(Calendar.MONTH, -1);
		String sd = getSdf(minPattern).format(cal.getTime());
		return getSdf(standPattern).parse(sd);
	}

	public static Date getLastMonthMaxDate() throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DATE));
		cal.add(Calendar.MONTH, -1);
		String sd = getSdf(maxPattern).format(cal.getTime());
		return getSdf(standPattern).parse(sd);
	}
	public static Date getLastYearMinDate(int year) throws ParseException {
        Calendar calendar = Calendar.getInstance();  
        calendar.clear();  
        calendar.set(Calendar.YEAR, year);  
        String sd = getSdf(maxPattern).format(calendar.getTime());
		return getSdf(standPattern).parse(sd);
	}

	public static Date getLastYearMaxDate(int year) throws ParseException {
        Calendar calendar = Calendar.getInstance();  
        calendar.clear();  
        calendar.set(Calendar.YEAR, year);  
        calendar.roll(Calendar.DAY_OF_YEAR, -1);  
		String sd = getSdf(maxPattern).format(calendar.getTime());
		return getSdf(standPattern).parse(sd);
	}
	
	public static Date getMinDateByType(int dateType) throws ParseException {
		return getDateTimeByType(dateType, false);
	}

	public static Date getMaxDateByType(int dateType) throws ParseException {
		return getDateTimeByType(dateType, true);
	}
	
	// 0.今日、1.昨天（默认项）、2.本周、3.上周、4.本月、5.上月、6.自定义时间,7.去年
	public static Date getDateTimeByType(int dateType, boolean isMax) throws ParseException {
		Date date = null;
		if (0 == dateType) {
			date = isMax ? getCurDayMaxDate() : getCurDayMinDate();
		} else if (1 == dateType) {
			date = isMax ? getLastDayMaxDate() : getLastDayMinDate();
		} else if (2 == dateType) {
			date = isMax ? getCurWeekMaxDate() : getCurWeekMinDate();
		} else if (3 == dateType) {
			date = isMax ? getLastWeekMaxDate() : getLastWeekMinDate();
		} else if (4 == dateType) {
			date = isMax ? getCurMonthMaxDate() : getCurMonthMinDate();
		} else if (5 == dateType) {
			date = isMax ? getLastMonthMaxDate() : getLastMonthMinDate();
		} else if (7 == dateType) {
			SimpleDateFormat s = new SimpleDateFormat("yyyy");
			Date startTime = CrmDateUtils.getDateByType(4, true);//本年的日期
			int lastYear = Integer.valueOf(s.format(startTime))-1;
			date = isMax ? getLastYearMaxDate(lastYear) : getLastYearMinDate(lastYear);
		}
		return date;
	}
    
	public static String getDifineWeekDate(int weekDay,int day) throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DAY_OF_WEEK, weekDay);
		cal.add(Calendar.WEEK_OF_YEAR, day);
		String sd = getSdf(defaultPattern).format(cal.getTime());
		return sd;
	}
	
	/**
	 * 获取当前月的日期
	 * @return
	 * @throws ParseException
	 */
	public static String getCurMonthDate() throws ParseException {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DATE, cal.getActualMinimum(Calendar.DATE));
		;
		String sd = getSdf(defaultPattern).format(cal.getTime());
		return sd;
	}
	
	/**
	 *获取本月所有日期 
	 */
	public static String getAllCurrentMonthDate(String startDate){
		
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
		cal = Calendar.getInstance();
        cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), 1);
        cal.add(Calendar.MONTH, 1);
        cal.add(Calendar.DATE, -1);
        String lastDay = sf.format(cal.getTime());
        String aDay = "";
        int i = 2;
        while (!lastDay.equals(aDay)) {
            cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), i);
            aDay = sf.format(cal.getTime());
            startDate += ","+sf.format(cal.getTime());
            i++;
        }
        return startDate;
	}
	
	/**
	 * 获取上月所有日期
	 * @return
	 */
	public static String getAllLastMonthDate(String startDate){
		
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
		cal = Calendar.getInstance();
        cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), 1);
        cal.add(Calendar.DATE, -1);
        String lastDay = sf.format(cal.getTime());
        String aDay = "";
        int i = 2;
        while (!lastDay.equals(aDay)) {
            cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), i);
            aDay = sf.format(cal.getTime());
            startDate += ","+sf.format(cal.getTime());
            i++;
        }
        
        return startDate;
	}
	
	/**
	 * 获取指定日期之间的日期
	 * @param minDate
	 * @param maxDate
	 * @return
	 */
	public static List<String> getMonthBetween(Date minDate, Date maxDate) {
	    ArrayList<String> result = new ArrayList<String>();
	    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
	 
	    Calendar min = Calendar.getInstance();
	    Calendar max = Calendar.getInstance();
	 
	    min.setTime(minDate);
	    min.set(min.get(Calendar.YEAR), min.get(Calendar.MONTH), 1);
	 
	    max.setTime(maxDate);
	    max.set(max.get(Calendar.YEAR), max.get(Calendar.MONTH), 2);
	 
	    Calendar curr = min;
	    while (curr.before(max)) {
	        result.add(sdf.format(curr.getTime()));
	        curr.add(Calendar.MONTH, 1);
	    }
	 
	    return result;
	}
	
	/**
	 * 获取指定日期之间的日期
	 * @param minDate
	 * @param maxDate
	 * @return
	 */
	public static List<String> getDateBetween(Date minDate, Date maxDate) {
		
		List<String> result = new ArrayList<String>();
	    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
	    result.add(sdf.format(minDate));  
        Calendar calBegin = Calendar.getInstance();  
        // 使用给定的 Date 设置此 Calendar 的时间    
        calBegin.setTime(minDate);  
        Calendar calEnd = Calendar.getInstance();  
        // 使用给定的 Date 设置此 Calendar 的时间    
        calEnd.setTime(maxDate);  
        // 测试此日期是否在指定日期之后    
        while (maxDate.after(calBegin.getTime())) {  
            // 根据日历的规则，为给定的日历字段添加或减去指定的时间量    
            calBegin.add(Calendar.DAY_OF_MONTH, 1);  
            result.add(sdf.format(calBegin.getTime()));  
        }  
	    return result;
	}
	
	/**
	 * 获取指定季度的月份，yyyy-MM-dd
	 * @param month
	 * @return
	 */
	public static String getThisSeasonTime(int month){
		int array[][] = {{1,2,3},{4,5,6},{7,8,9},{10,11,12}};
		int season = 1;
		if(month>=1&&month<=3){
			season = 1;
		}
		if(month>=4&&month<=6){
			season = 2;
		}
		if(month>=7&&month<=9){
			season = 3;
		}
		if(month>=10&&month<=12){
			season = 4;
		}
		int start_month = array[season-1][0];
		int end_month = array[season-1][2];
		Date date = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy");//可以方
		String years = dateFormat.format(date);
		int years_value = Integer.parseInt(years);
		int start_days =1;
		int end_days = getLastDayOfMonth(years_value,end_month);
		String seasonDate = years_value+"-"+start_month+"-"+start_days+""
				+ ","+years_value+"-"+(end_month-1)+"-"+start_days+","+years_value+"-"+end_month+"-"+end_days;
		return seasonDate;
	}
	
	/**
	 * 获取指定格式的月份区间，yyyy-MM
	 * @param month
	 * @return
	 */
	public static String getThisSeasonDate(int month){
		int array[][] = {{1,2,3},{4,5,6},{7,8,9},{10,11,12}};
		int season = 1;
		if(month>=1&&month<=3){
			season = 1;
		}
		if(month>=4&&month<=6){
			season = 2;
		}
		if(month>=7&&month<=9){
			season = 3;
		}
		if(month>=10&&month<=12){
			season = 4;
		}
		int start_month = array[season-1][0];
		String monthStr1 = "";
		if((start_month+"").length()<2){
			monthStr1 = "0"+start_month;
		}
		int bet_month = start_month+1;
		String monthStr2 = "";
		if((bet_month+"").length()<2){
			monthStr2 = "0"+bet_month;
		}
		
		int end_month = array[season-1][2];
		String monthStr3 = "";
		if((end_month+"").length()<2){
			monthStr3 = "0"+end_month;
		}
		Date date = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy");//可以方
		String years = dateFormat.format(date);
		int years_value = Integer.parseInt(years);
		String seasonDate = years_value+"-"+monthStr1+","+years_value+"-"+monthStr2+","+years_value+"-"+monthStr3;
		return seasonDate;
	}
	
	/**
	* 获取某年某月的最后一天
	* @param year 年
	* @param month 月
	* @return 最后一天
	*/
	private static int getLastDayOfMonth(int year, int month) {
		if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8
				|| month == 10 || month == 12) {
			return 31;
		}
		if (month == 4 || month == 6 || month == 9 || month == 11) {
			return 30;
		}
		if (month == 2) {
			if (isLeapYear(year)) {
				return 29;
			} else {
				return 28;
			}
		}
		return 0;
	}

	/**
	* 是否闰年
	* @param year 年
	* @return
	*/
	public static boolean isLeapYear(int year) {
		return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
	}
}
