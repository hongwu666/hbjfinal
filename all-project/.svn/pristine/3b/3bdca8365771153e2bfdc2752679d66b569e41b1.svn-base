package saas.winbons.framework.tools;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import saas.winbons.data.constant.DataConstant;

public abstract class ToolNumber {


	public static final String LINE_SEPARATOR = "\r\n";
	// 默认除法运算精度
	private static final int DEF_DIV_SCALE = 10;


	public static int toZeroIfNull(Integer integer) {
		if (integer == null) {
			return 0;
		}
		return integer.intValue();
	}

	public static long toZeroIfNull(Long longNumber) {
		if (longNumber == null) {
			return 0;
		}
		return longNumber.longValue();
	}

	public static BigDecimal toZeroIfNull(BigDecimal bigDecimalNumber) {
		if (bigDecimalNumber == null)
			bigDecimalNumber = new BigDecimal(0);
		return bigDecimalNumber;
	}

	public static BigDecimal toNullIfZero(BigDecimal bigDecimalNumber) {
		if (bigDecimalNumber != null && bigDecimalNumber.compareTo(new BigDecimal(0)) == 0)
			bigDecimalNumber = null;
		return bigDecimalNumber;
	}

	public static String getNumber(String value) {
		Pattern pattern = Pattern.compile("\\d+");
		Matcher matcher = pattern.matcher(value);
		if (matcher.find()) {
			return matcher.group();
		}
		return null;
	}

	public static String getAllNumbers(String value) {
		Pattern pattern = Pattern.compile("\\d+");
		Matcher matcher = pattern.matcher(value);
		StringBuilder builder = new StringBuilder();
		while (matcher.find()) {
			builder.append(matcher.group());
		}
		return builder.length() > 0 ? builder.toString() : null;
	}

	public static boolean isInteger(String integer) {
		return isMatches("[0-9]*", integer);
	}

	public static boolean isBigDecimalIncComma(String bigDecimal) {
		return isMatches("^([1-9][0-9]{0,2}(,[0-9]{3})*(\\.[0-9]+)?|0(\\.[0-9]+)?)$", bigDecimal);
	}

	public static boolean isBigDecimalNoComma(String bigDecimal) {
		return isMatches("^([1-9][0-9]*(\\.[0-9]+)?|0(\\.[0-9]+)?)$", bigDecimal);
	}

	public static boolean isMatches(String regex, String str) {
		boolean result = false;
		try {
			if (str != null && !"".equals(str)) {
				Pattern pattern = Pattern.compile(regex);
				Matcher isNum = pattern.matcher(str);
				if (isNum.matches())
					result = true;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			result = false;
		}
		return result;
	}

	/**
	 * 提供精确的加法运算。
	 * 
	 * @param v1
	 *            被加数
	 * @param v2
	 *            加数
	 * @return 两个参数的和
	 */
	public static double add(double v1, double v2) {
		BigDecimal b1 = new BigDecimal(Double.toString(v1));
		BigDecimal b2 = new BigDecimal(Double.toString(v2));
		return b1.add(b2).doubleValue();
	}

	/**
	 * 提供精确的减法运算。
	 * 
	 * @param v1
	 *            被减数
	 * @param v2
	 *            减数
	 * @return 两个参数的差
	 */
	public static double sub(double v1, double v2) {
		BigDecimal b1 = new BigDecimal(Double.toString(v1));
		BigDecimal b2 = new BigDecimal(Double.toString(v2));
		return b1.subtract(b2).doubleValue();
	}

	/**
	 * 提供精确的乘法运算。
	 * 
	 * @param v1
	 *            被乘数
	 * @param v2
	 *            乘数
	 * @return 两个参数的积
	 */
	public static double mul(double v1, double v2) {
		BigDecimal b1 = new BigDecimal(Double.toString(v1));
		BigDecimal b2 = new BigDecimal(Double.toString(v2));
		return b1.multiply(b2).doubleValue();
	}

	/**
	 * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到 小数点以后10位，以后的数字四舍五入。
	 * 
	 * @param v1
	 *            被除数
	 * @param v2
	 *            除数
	 * @return 两个参数的商
	 */
	public static double div(double v1, double v2) {
		return div(v1, v2, DEF_DIV_SCALE);
	}

	/**
	 * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指 定精度，以后的数字四舍五入。
	 * 
	 * @param v1
	 *            被除数
	 * @param v2
	 *            除数
	 * @param scale
	 *            表示表示需要精确到小数点以后几位。
	 * @return 两个参数的商
	 */
	public static double div(double v1, double v2, int scale) {
		if (scale < 0) {
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		BigDecimal b1 = new BigDecimal(Double.toString(v1));
		BigDecimal b2 = new BigDecimal(Double.toString(v2));
		return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();
	}

	/** */
	/**
	 * 提供精确的小数位四舍五入处理。
	 * 
	 * @param v
	 *            需要四舍五入的数字
	 * @param scale
	 *            小数点后保留几位
	 * @return 四舍五入后的结果
	 */
	public static double round(double v, int scale) {
		if (scale < 0) {
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		BigDecimal b = new BigDecimal(Double.toString(v));
		BigDecimal one = new BigDecimal("1");
		return b.divide(one, scale, BigDecimal.ROUND_HALF_UP).doubleValue();
	}

	public static int compare(BigDecimal obj1, BigDecimal obj2) {
		return ToolNumber.toZeroIfNull(obj1).compareTo(ToolNumber.toZeroIfNull(obj2));
	}

	public static String displayNumber(Double oldValue, Integer scale) {
		String num = "";
		if (oldValue == null)
			oldValue = new Double(0);
		if (scale == null) {
			scale = DataConstant.STD_DECIMAL_SCALE;
		}
		if (scale.intValue() >= 0) {
			BigDecimal ori = new BigDecimal(Double.toString(oldValue.doubleValue()));
			BigDecimal formatted = ori.divide(new BigDecimal(1), scale, BigDecimal.ROUND_HALF_UP);
			num = String.valueOf(formatted);
		}
		return num;
	}

	public static String displayNumber(Double oldValue) {
		return displayNumber(oldValue, null);
	}

	public static String displayMoney(Double oldValue) {
		return displayMoney(oldValue, null);
	}

	public static String displayMoney(Double oldValue, Integer scale) {
		String formatString = "";
		String money = "";
		if (oldValue == null)
			oldValue = new Double(0);

		BigDecimal tempValue = new BigDecimal(ToolString.valueOf(oldValue));
		if (scale == null) {
			scale = DataConstant.STD_DECIMAL_SCALE;
		}
		if (scale.intValue() > 0) {
			formatString = DataConstant.STD_MONEY_FORMAT + ".";
			for (int i = 0; i < scale.intValue(); i++) {
				formatString = formatString + "0";
			}
		}
		DecimalFormat numberFormatter = new DecimalFormat(formatString);

		money = numberFormatter.format(tempValue);
		return money;
	}

	public static String displayMoney(String oldValue, Integer scale) {
		String formatString = "";
		String money = "";
		if (ToolString.isEmptyString(oldValue))
			oldValue = "0";

		BigDecimal tempValue = new BigDecimal(oldValue);
		if (scale == null) {
			scale = DataConstant.STD_DECIMAL_SCALE;
		}
		if (scale.intValue() > 0) {
			formatString = DataConstant.STD_MONEY_FORMAT + ".";
			for (int i = 0; i < scale.intValue(); i++) {
				formatString = formatString + "0";
			}
		}
		DecimalFormat numberFormatter = new DecimalFormat(formatString);

		money = numberFormatter.format(tempValue);
		return money;
	}

	public static String bytes2kbstr(long bytes) {
		BigDecimal filesize = new BigDecimal(bytes);
		BigDecimal megabyte = new BigDecimal(1024 * 1024);
		float returnValue = filesize.divide(megabyte, 2, BigDecimal.ROUND_UP).floatValue();
		if (returnValue > 1)
			return (returnValue + "MB");
		BigDecimal kilobyte = new BigDecimal(1024);
		returnValue = filesize.divide(kilobyte, 2, BigDecimal.ROUND_UP).floatValue();
		return (returnValue + "KB");
	}

	public static float bytes2kb(long bytes) {
		BigDecimal filesize = new BigDecimal(bytes);
		BigDecimal kilobyte = new BigDecimal(1024);
		return filesize.divide(kilobyte, 2, BigDecimal.ROUND_UP).floatValue();
	}
	
	public static void main(String[] args) {
		System.out.println(replaceNumber("aa123_12-121 222"));
	}
	
	public static boolean checkIsNumber(String content) {
		String check = "([0-9]+)";
		Pattern regex = Pattern.compile(check);
		Matcher matcher = regex.matcher(content);
		boolean flag = matcher.matches();
		return flag;
	}
	
	public static String replaceNumber(String content){
		return content.replaceAll("[\\_\\-\\ ]", "");
	}


}
