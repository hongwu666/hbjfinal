package saas.winbons.dubbo.api;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RequestDTO implements Serializable {

	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private Map<Object, Object> data = new HashMap<Object, Object>();
	
	private List<FilterDTO> fitler = new ArrayList<FilterDTO>();
	
	private List<SortDTO> sort = new ArrayList<SortDTO>();
	
	private ContextDTO contextDTO;
	
	private String method;
	
	public RequestDTO(){}
	
	public RequestDTO(ContextDTO contextDTO,String method){
		this.contextDTO = contextDTO;
		this.method = method;
	}
	
	public RequestDTO put(Object key, Object value) {
		data.put(key, value);
		return this;
	}
	
	@SuppressWarnings({"rawtypes", "unchecked"})
	public RequestDTO put(Map map) {
		this.data.putAll(map);
		return this;
	}
	
	@SuppressWarnings("unchecked")
	public <T> T get(Object key) {
		return (T)data.get(key);
	}
	
	public RequestDTO clear() {
		data.clear();
		fitler.clear();
		return this;
	}
	
	
	public boolean equals(RequestDTO RequestDTO) {
		return RequestDTO != null && this.data.equals(RequestDTO.data);
	}
	
	/**
	 * key 存在，但 value 可能为 null
	 */
	public boolean containsKey(Object key) {
		return data.containsKey(key);
	}
	
	public boolean containsValue(Object value) {
		return data.containsValue(value);
	}
	
	/**
	 * key 存在，并且 value 不为 null
	 */
	public boolean notNull(Object key) {
		return data.get(key) != null;
	}
	
	/**
	 * key 不存在，或者 key 存在但 value 为null
	 */
	public boolean isNull(Object key) {
		return data.get(key) == null;
	}
	
	/**
	 * key 存在，并且 value 为 true，则返回 true
	 */
	public boolean isTrue(Object key) {
		Object value = data.get(key);
		return (value instanceof Boolean && ((Boolean)value == true));
	}
	
	/**
	 * key 存在，并且 value 为 false，则返回 true
	 */
	public boolean isFalse(Object key) {
		Object value = data.get(key);
		return (value instanceof Boolean && ((Boolean)value == false));
	}
	
	@SuppressWarnings("unchecked")
	public <T> T remove(Object key) {
		return (T)data.remove(key);
	}
	
	public Map<Object, Object> getData() {
		return data;
	}
	
	public List<FilterDTO> getFitler() {
		return fitler;
	}
	
	public  RequestDTO putFitler(FilterDTO FilterDTO){
		fitler.add(FilterDTO);
		return this;
	}
	
	public  RequestDTO putAllFitler(List<FilterDTO> listFilterDTO){
		fitler = listFilterDTO;
		return this;
	}
	
	

	public List<SortDTO> getSort() {
		return sort;
	}
	
	public  RequestDTO putSort(SortDTO SortDTO){
		sort.add(SortDTO);
		return this;
	}
	
	public  RequestDTO putAllSort(List<SortDTO> listSortDTO){
		sort = listSortDTO;
		return this;
	}
	

	public String getMethod() {
		return method;
	}

	public void setMethod(String method) {
		this.method = method;
	}

	public ContextDTO getContextDTO() {
		return contextDTO;
	}

	public void setContextDTO(ContextDTO contextDTO) {
		this.contextDTO = contextDTO;
	}

}
