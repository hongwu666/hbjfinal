package saas.winbons.framework.utils;

import org.apache.poi.hssf.usermodel.DVConstraint;
import org.apache.poi.hssf.usermodel.HSSFDataValidation;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataValidation;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Name;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.ss.util.CellRangeAddressList;
import org.apache.poi.ss.util.CellUtil;

public class POIExcelUtil {

	/**
	 * 创建列
	 */
	public static Cell createCell(Row row, int cellNum, CellStyle style) {
		Cell cell = row.createCell(cellNum);
		cell.setCellStyle(style);
		return cell;
	}

	/**
	 * 合并单元格
	 */
	public static int mergeCell(Sheet sheet, int firstRow, int lastRow, int firstColumn, int lastColumn) {
		return sheet.addMergedRegion(new CellRangeAddress(firstRow, lastRow, firstColumn, lastColumn));
	}

	/**
	 * 设置合并单元格的边框样式
	 * */
	public static void setRegionStyle(Sheet sheet, CellRangeAddress ca, CellStyle style) {
		for (int i = ca.getFirstRow(); i <= ca.getLastRow(); i++) {
			Row row = CellUtil.getRow(i, sheet);
			for (int j = ca.getFirstColumn(); j <= ca.getLastColumn(); j++) {
				Cell cell = CellUtil.getCell(row, j);
				cell.setCellStyle(style);
			}
		}
	}

	/**
	 * 创建字体
	 */
	public static Font createFont(Workbook wb, short boldweight, short color, short size) {
		Font font = wb.createFont();
		font.setBoldweight(boldweight);
		font.setColor(color);
		font.setFontHeightInPoints(size);
		return font;
	}

	/**
	 * 创建一行名称管理器数据
	 */
	public static void createNameManagerContent(Row currentRow, String[] textList) {
		if (textList != null && textList.length > 0) {
			int i = 0;
			for (String cellValue : textList) {
				Cell userNameLableCell = currentRow.createCell(i++);
				userNameLableCell.setCellValue(cellValue);
			}
		}
	}

	/**
	 * 创建一个名称管理器
	 * 
	 * @param workbook
	 */
	public static void createNameManger(Workbook workbook, String sheetName, String nameCode, int order, int size) {
		Name name = workbook.createName();
		name.setNameName(nameCode);
		name.setRefersToFormula(sheetName + "!" + createExcelNameList(order, size));
	}

	/**
	 * 名称数据行列计算表达式
	 * 
	 * @param workbook
	 */
	public static String createExcelNameList(int order, int size) {
		char start = 'A';
		if (size <= 26) {
			char end = (char) (start + size - 1);
			return "$" + start + "$" + order + ":$" + end + "$" + order;
		} else {
			char endPrefix = 'A';
			char endSuffix = 'A';
			if (size % 26 == 0) {
				endSuffix = (char) ('A' + 25);
				if (size > 52 && size / 26 > 0) {
					endPrefix = (char) (endPrefix + size / 26 - 2);
				}
			} else {
				endSuffix = (char) ('A' + size % 26 - 1);
				if (size > 52 && size / 26 > 0) {
					endPrefix = (char) (endPrefix + size / 26 - 1);
				}
			}
			return "$" + start + "$" + order + ":$" + endPrefix + endSuffix + "$" + order;
		}
	}

	/**
	 * 使用已定义的数据源方式设置一个数据验证
	 * 
	 * @param formulaString
	 * @param naturalRowIndex
	 * @param naturalColumnIndex
	 * @return
	 */
	public static DataValidation getDataValidationByFormula(String formulaString, int firstRow, int lastRow, int firstCol, int lastCol) {
		// 加载下拉列表内容
		DVConstraint constraint = DVConstraint.createFormulaListConstraint(formulaString);
		// 设置数据有效性加载在哪个单元格上。
		// 四个参数分别是：起始行、终止行、起始列、终止列
		CellRangeAddressList regions = new CellRangeAddressList(firstRow, lastRow, firstCol, lastCol);
		// 数据有效性对象
		DataValidation dataValidationList = new HSSFDataValidation(regions, constraint);
		// 设置输入信息提示信息
		dataValidationList.createPromptBox("下拉选择提示", "请使用下拉方式选择合适的值！");
		// 设置输入错误提示信息
		dataValidationList.createErrorBox("选择错误提示", "你输入的值未在备选列表中，请下拉选择合适的值！");
		return dataValidationList;
	}

	public static DataValidation getDataValidationByDate(int firstRow, int lastRow, int firstCol, int lastCol) {
		// 加载下拉列表内容
		DVConstraint constraint = DVConstraint.createDateConstraint(DVConstraint.OperatorType.BETWEEN, "1900-01-01", "5000-01-01", "yyyy-mm-dd");
		// 设置数据有效性加载在哪个单元格上。
		CellRangeAddressList regions = new CellRangeAddressList(firstRow, lastRow, firstCol, lastCol);
		// 数据有效性对象
		DataValidation data_validation_list = new HSSFDataValidation(regions, constraint);
		// 设置输入信息提示信息
		data_validation_list.createPromptBox("日期格式提示", "请按照'yyyy-mm-dd'格式输入日期值。");
		// 设置输入错误提示信息
		data_validation_list.createErrorBox("日期格式错误提示", "你输入的日期格式不符合'yyyy-mm-dd'格式规范，请重新输入！");
		return data_validation_list;
	}

	public static DataValidation getDataValidationByEmail(String formula, int firstRow, int lastRow, int firstCol, int lastCol) {
		// 加载下拉列表内容
		DVConstraint constraint = DVConstraint.createCustomFormulaConstraint(formula);
		// 设置数据有效性加载在哪个单元格上。
		CellRangeAddressList regions = new CellRangeAddressList(firstRow, lastRow, firstCol, lastCol);
		// 数据有效性对象
		DataValidation data_validation_list = new HSSFDataValidation(regions, constraint);
		// 设置输入信息提示信息
		data_validation_list.createPromptBox("邮箱输入提示", "邮箱长度6-18个字符，可使用字母、数字、下划线。");
		// 设置输入错误提示信息
		data_validation_list.createErrorBox("邮箱格式错误提示", "你输入的邮箱格式不正确，请重新输入！");
		return data_validation_list;
	}

	// 判断从Excel文件中解析出来数据的格式
	public static String getCellValue(Cell cell) {
		String value = null;
		// 简单的查检列类型
		try{
			if (cell == null)
				return null;
			switch (cell.getCellType()) {
			case Cell.CELL_TYPE_STRING:// 字符串
				value = cell.getRichStringCellValue().getString();
				break;
			case Cell.CELL_TYPE_NUMERIC:// 数字
				Double dd = (Double) cell.getNumericCellValue();
				if (dd != null && (dd.equals(Double.valueOf(dd.longValue())))) {
					value = String.valueOf(dd.longValue());
				} else if(dd != null) {
					value = String.valueOf(dd);
				}
				break;
			case Cell.CELL_TYPE_BLANK:
				value = "";
				break;
			case Cell.CELL_TYPE_FORMULA:
				value = String.valueOf(cell.getCellFormula());
				break;
			case Cell.CELL_TYPE_BOOLEAN:// boolean型值
				value = String.valueOf(cell.getBooleanCellValue());
				break;
			case Cell.CELL_TYPE_ERROR:
				value = String.valueOf(cell.getErrorCellValue());
				break;
			default:
				break;
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return value;
	}
}
