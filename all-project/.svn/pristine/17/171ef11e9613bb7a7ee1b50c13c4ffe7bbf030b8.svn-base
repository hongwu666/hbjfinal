/** 
 * Copyright (C) 2014 Winbons Technology Software Co.,Ltd
 * All Rights Reserved.
 * Development of this softwareWinbons Technology Software Co.,Ltd.
 * Without the formal written consent of the Company, 
 * any other individuals, groups may not use, 
 * copy, modify, or distribute this software
 * @Title: FilterItemListImpl.java 
 * @Package saas.framework.sql 
 * @Description: TODO(用一句话描述该文件做什么) 
 * @author star.ye 
 * @date 2014年6月28日 上午10:08:21 
 * @version 1.0 
 */

package saas.framework.sql;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;


/**
 * @ClassName: FilterItemListImpl
 * @Description: TODO(这里用一句话描述这个类的作用)
 * @author star.ye
 * @date 2014年6月28日 上午10:08:21
 */

public class FilterItemListImpl implements FilterItemList {

	private String mergerStr = null;

	private LogicType logicType = LogicType.AND;

	private List<FilterItem> filterItems = new ArrayList<FilterItem>();

	private List<OrderItem> orderItems = new ArrayList<OrderItem>();

	public FilterItemList addFilterItem(FilterItem filterItem) {
		filterItems.add(filterItem);
		return this;
	}

	public void setMergeStr(String str) {
		this.mergerStr = str;
	}

	public String getFilter() {
		StringBuilder sb = new StringBuilder();
		if (mergerStr == null) {
			// 设置merger and;
			for (int i = 0, len = filterItems.size(); i < len; i++) {
				FilterItem filterItem = filterItems.get(i);
				sb.append(filterItem.toString());
				if (i != len - 1) {
					sb.append(" ");
					sb.append(logicType.value);
					sb.append(" ");
				}
			}
		} else {
			sb.append(changeBymerger(mergerStr));
		}
		if (orderItems.size() > 0) {
			sb.append(" ORDER BY ");
			for (int i = 0, len = orderItems.size(); i < len; i++) {
				OrderItem orderItem = orderItems.get(i);
				sb.append(orderItem.toString());
				if (i != len - 1) {
					sb.append(",");
				}
			}
		}
		return sb.toString();
	}

	private String changeBymerger(String merger) {
		String tempMerger = merger;
		for (int i = 0, len = filterItems.size(); i < len; i++) {
			tempMerger = StringUtils.replace(tempMerger, i + "#", filterItems.get(i).toString());
		}
		if (tempMerger.indexOf("#") > 0) {
			throw new RuntimeException("please check your str ,not match by " + merger + ",must start 0# ");
		}
		return tempMerger;
	}

	public void resetFilter() {
		filterItems.clear();
		orderItems.clear();
		this.mergerStr = null;
	}

	public String toString() {
		return getFilter();
	}

	public int filerItemSize() {
		return filterItems.size();

	}

	public FilterItemList addOrderItem(OrderItem orderItem) {
		orderItems.add(orderItem);
		return this;
	}

	@Override
	public FilterItem getFilterItem(int i) {
		return filterItems.get(i);
	}

	@Override
	public OrderItem getOrederItem(int i) {
		return orderItems.get(i);

	}

	@Override
	public int orderItems() {
		return orderItems.size();
	}

	public void setLogicType(LogicType logicType) {
		this.logicType = logicType;
	}
}
