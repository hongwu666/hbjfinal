package com.jfinal.plugin.sql;

import java.util.Collections;
import java.util.List;

import net.sf.jsqlparser.expression.AllComparisonExpression;
import net.sf.jsqlparser.expression.AnyComparisonExpression;
import net.sf.jsqlparser.expression.BinaryExpression;
import net.sf.jsqlparser.expression.CaseExpression;
import net.sf.jsqlparser.expression.Expression;
import net.sf.jsqlparser.expression.ExpressionVisitor;
import net.sf.jsqlparser.expression.Function;
import net.sf.jsqlparser.expression.Parenthesis;
import net.sf.jsqlparser.expression.WhenClause;
import net.sf.jsqlparser.expression.operators.arithmetic.Addition;
import net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd;
import net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr;
import net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor;
import net.sf.jsqlparser.expression.operators.arithmetic.Concat;
import net.sf.jsqlparser.expression.operators.arithmetic.Division;
import net.sf.jsqlparser.expression.operators.arithmetic.Multiplication;
import net.sf.jsqlparser.expression.operators.arithmetic.Subtraction;
import net.sf.jsqlparser.expression.operators.conditional.AndExpression;
import net.sf.jsqlparser.expression.operators.conditional.OrExpression;
import net.sf.jsqlparser.expression.operators.relational.Between;
import net.sf.jsqlparser.expression.operators.relational.EqualsTo;
import net.sf.jsqlparser.expression.operators.relational.ExistsExpression;
import net.sf.jsqlparser.expression.operators.relational.ExpressionList;
import net.sf.jsqlparser.expression.operators.relational.GreaterThan;
import net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals;
import net.sf.jsqlparser.expression.operators.relational.InExpression;
import net.sf.jsqlparser.expression.operators.relational.IsNullExpression;
import net.sf.jsqlparser.expression.operators.relational.LikeExpression;
import net.sf.jsqlparser.expression.operators.relational.Matches;
import net.sf.jsqlparser.expression.operators.relational.MinorThan;
import net.sf.jsqlparser.expression.operators.relational.MinorThanEquals;
import net.sf.jsqlparser.expression.operators.relational.NotEqualsTo;
import net.sf.jsqlparser.statement.delete.Delete;
import net.sf.jsqlparser.statement.insert.Insert;
import net.sf.jsqlparser.statement.replace.Replace;
import net.sf.jsqlparser.statement.select.FromItemVisitor;
import net.sf.jsqlparser.statement.select.Join;
import net.sf.jsqlparser.statement.select.OrderByElement;
import net.sf.jsqlparser.statement.select.PlainSelect;
import net.sf.jsqlparser.statement.select.Select;
import net.sf.jsqlparser.statement.select.SelectExpressionItem;
import net.sf.jsqlparser.statement.select.SelectItem;
import net.sf.jsqlparser.statement.select.SubJoin;
import net.sf.jsqlparser.statement.select.SubSelect;
import net.sf.jsqlparser.statement.update.Update;

public class TraversalVisitor extends EmptyVisitor {

	@Override
	public void visit(Addition addition) {
		visitBinaryExpression(addition);
	}

	protected void visitBinaryExpression(BinaryExpression binaryExpression) {
		if (binaryExpression.getLeftExpression() != null)
			binaryExpression.getLeftExpression().accept(this);
		if (binaryExpression.getRightExpression() != null)
			binaryExpression.getRightExpression().accept(this);
	}

	@Override
	public void visit(AndExpression andExpression) {
		visitBinaryExpression(andExpression);
	}

	@Override
	public void visit(Between between) {
		between.getLeftExpression().accept(this);
		between.getBetweenExpressionStart().accept(this);
		between.getBetweenExpressionEnd().accept(this);
	}

	@Override
	public void visit(Division division) {
		visitBinaryExpression(division);
	}

	@Override
	public void visit(EqualsTo equalsTo) {
		visitBinaryExpression(equalsTo);
	}

	@Override
	public void visit(GreaterThan greaterThan) {
		visitBinaryExpression(greaterThan);
	}

	@Override
	public void visit(GreaterThanEquals greaterThanEquals) {
		visitBinaryExpression(greaterThanEquals);
	}

	@Override
	public void visit(InExpression inExpression) {
		inExpression.getLeftExpression().accept(this);
		inExpression.getRightItemsList().accept(this);
	}

	@Override
	public void visit(IsNullExpression isNullExpression) {
		isNullExpression.getLeftExpression().accept(this);
	}

	@Override
	public void visit(LikeExpression likeExpression) {
		visitBinaryExpression(likeExpression);
	}

	@Override
	public void visit(ExistsExpression existsExpression) {
		existsExpression.getRightExpression().accept(this);
	}

	@Override
	public void visit(MinorThan minorThan) {
		visitBinaryExpression(minorThan);
	}

	@Override
	public void visit(MinorThanEquals minorThanEquals) {
		visitBinaryExpression(minorThanEquals);
	}

	@Override
	public void visit(Multiplication multiplication) {
		visitBinaryExpression(multiplication);
	}

	@Override
	public void visit(NotEqualsTo notEqualsTo) {
		visitBinaryExpression(notEqualsTo);
	}

	@Override
	public void visit(OrExpression orExpression) {
		visitBinaryExpression(orExpression);
	}

	@Override
	public void visit(Parenthesis parenthesis) {
		parenthesis.getExpression().accept(this);
	}

	@Override
	public void visit(Subtraction subtraction) {
		visitBinaryExpression(subtraction);
	}

	@Override
	public void visit(SubSelect subSelect) {
		subSelect.getSelectBody().accept(this);
	}

	@Override
	public void visit(Function function) {
		if (function.getParameters() != null) {
			function.getParameters().accept(this);
		}
	}

	@Override
	public void visit(ExpressionList expressionList) {
		visitExpressions(expressionList.getExpressions());
	}

	@Override
	public void visit(CaseExpression caseExpression) {
		Expression switchExp = caseExpression.getSwitchExpression();
		if (switchExp != null) {
			switchExp.accept(this);
		}
		visitExpressions(caseExpression.getWhenClauses());
		Expression elseExp = caseExpression.getElseExpression();
		if (elseExp != null) {
			elseExp.accept(this);
		}
	}

	@Override
	public void visit(WhenClause whenClause) {
		whenClause.getWhenExpression().accept(this);
		whenClause.getThenExpression().accept(this);
	}

	@Override
	public void visit(AllComparisonExpression allComparisonExpression) {
		allComparisonExpression.getSubSelect().accept((ExpressionVisitor) this);
	}

	@Override
	public void visit(AnyComparisonExpression anyComparisonExpression) {
		anyComparisonExpression.getSubSelect().accept((ExpressionVisitor) this);
	}

	@Override
	public void visit(Concat concat) {
		visitBinaryExpression(concat);
	}

	@Override
	public void visit(Matches matches) {
		visitBinaryExpression(matches);
	}

	@Override
	public void visit(BitwiseAnd bitwiseAnd) {
		visitBinaryExpression(bitwiseAnd);
	}

	@Override
	public void visit(BitwiseOr bitwiseOr) {
		visitBinaryExpression(bitwiseOr);
	}

	@Override
	public void visit(BitwiseXor bitwiseXor) {
		visitBinaryExpression(bitwiseXor);
	}

	protected void visitSelectItems(List<?> unsafeList) {
		List<SelectItem> list = safeList(unsafeList);
		for (SelectItem selectItem : list) {
			selectItem.accept(this);
		}
	}

	@SuppressWarnings("unchecked")
	protected <T> List<T> safeList(List<?> list) {
		if (list == null) {
			return Collections.emptyList();
		} else {
			return (List<T>) list;
		}
	}

	protected void visitExpressions(List<?> unsafeList) {
		List<Expression> list = safeList(unsafeList);
		for (Expression expression : list) {
			expression.accept(this);
		}
	}

	@Override
	public void visit(PlainSelect plainSelect) {
		visitTopInSelect(plainSelect);
		visitDistinctInSelect(plainSelect);
		visitSelectItemsInSelect(plainSelect);
		visitFromItemInSelect(plainSelect);
		visitJoinsInSelect(plainSelect);
		visitWhereInSelect(plainSelect);
		visitGroupByInSelect(plainSelect);
		visitHavingInSelect(plainSelect);
		visitLimitInSelect(plainSelect);
	}

	protected void visitTopInSelect(PlainSelect plainSelect) {
		if (plainSelect.getTop() != null) {
		}
	}

	protected void visitDistinctInSelect(PlainSelect plainSelect) {
		if (plainSelect.getDistinct() != null) {
			visitSelectItems(plainSelect.getDistinct().getOnSelectItems());
		}
	}

	protected void visitSelectItemsInSelect(PlainSelect plainSelect) {
		visitSelectItems(plainSelect.getSelectItems());
	}

	protected void visitFromItemInSelect(PlainSelect plainSelect) {
		if (plainSelect.getFromItem() != null) {
			plainSelect.getFromItem().accept(this);
		}
	}

	protected void visitJoinsInSelect(PlainSelect plainSelect) {
		visitJoins(plainSelect.getJoins());
	}

	protected void visitWhereInSelect(PlainSelect plainSelect) {
		if (plainSelect.getWhere() != null) {
			plainSelect.getWhere().accept(this);
		}
	}

	protected void visitGroupByInSelect(PlainSelect plainSelect) {
		visitExpressions(plainSelect.getGroupByColumnReferences());
	}

	protected void visitHavingInSelect(PlainSelect plainSelect) {
		if (plainSelect.getHaving() != null) {
			plainSelect.getHaving().accept(this);
		}
	}

	protected void visitOrderByInSelect(PlainSelect plainSelect) {
		visitOrderBys(plainSelect.getOrderByElements());
	}

	protected void visitLimitInSelect(PlainSelect plainSelect) {
		if (plainSelect.getLimit() != null) {
		}
	}

	protected void visitOrderBys(List<?> unsafeList) {
		List<OrderByElement> list = safeList(unsafeList);
		for (OrderByElement orderByElement : list) {
			orderByElement.accept(this);
		}
	}

	@Override
	public void visit(OrderByElement orderBy) {
		orderBy.getExpression().accept(this);
	}

	@Override
	public void visit(SelectExpressionItem selectExpressionItem) {
		selectExpressionItem.getExpression().accept(this);
	}

	@Override
	public void visit(SubJoin subjoin) {
		subjoin.getLeft().accept(this);
		visitJoin(subjoin.getJoin());
	}

	protected void visitJoins(List<?> unsafeList) {
		List<Join> list = safeList(unsafeList);
		for (Join join : list) {
			visitJoin(join);
		}
	}

	protected void visitJoin(Join join) {
		join.getRightItem().accept(this);
		if (join.getOnExpression() != null) {
			join.getOnExpression().accept(this);
		}
	}

	@Override
	public void visit(Select select) {
		select.getSelectBody().accept(this);
	}

	@Override
	public void visit(Delete delete) {
		delete.getTable().accept((FromItemVisitor) this);
		if (delete.getWhere() != null) {
			delete.getWhere().accept(this);
		}
	}

	@Override
	public void visit(Update update) {
		visitExpressions(update.getExpressions());
		if (update.getWhere() != null) {
			update.getWhere().accept(this);
		}
	}

	@Override
	public void visit(Insert insert) {
		insert.getItemsList().accept(this);
	}

	@Override
	public void visit(Replace replace) {
		if (replace.getItemsList() != null) {
			replace.getItemsList().accept(this);
		}
	}

}
