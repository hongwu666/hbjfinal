package saas.winbons.data.model.calendar;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;

import saas.winbons.data.constant.DataConstant;
import saas.winbons.dubbo.api.ContextDTO;
import saas.winbons.framework.tools.ToolDate;
import saas.winbons.framework.tools.ToolString;

import com.jfinal.ext.plugin.quartz.QuartzKit;
import com.jfinal.plugin.activerecord.Db;

@Component
public class CalendarInfoEventListener implements ApplicationListener<CalendarInfoEvent> {

	protected final Logger LOG = LoggerFactory.getLogger(CalendarInfoEventListener.class);

	@Override
	public void onApplicationEvent(CalendarInfoEvent event) {

		try {

			Map<String, Object> source = (Map<String, Object>) event.getSource();
			Map<String, Object> map = (Map<String, Object>) source.get("data");
			ContextDTO contextDTO = (ContextDTO) source.get("contextDTO");
			
			if(null != map.get("module") && ToolString.toString(map.get("module")).equals("Customer")){
				 //todo jacky 更新最近时间
		       /* if(map.get("itemId") != null ){
		            String sql = "UPDATE t_crm_customer SET lastcontact_date=" + System.currentTimeMillis() + " WHERE id=" + map.get("itemId") + "";
		            Db.update(contextDTO, sql);
		        }*/
			}

			if (ToolString.toString(map.get("alert")).equals(DataConstant.YES_OR_NO_NO)) {
				QuartzKit.removeJob("calendar-" + contextDTO.getDbId() + "_" + map.get("id"));
				return;
			}
			if (ToolString.toString(map.get("alert")).equals(DataConstant.YES_OR_NO_YES)) {
				Long createTime = Long.parseLong(map.get("startTime").toString());
				Long delayMillisecond = Long.parseLong(String.valueOf(Integer.parseInt(map.get("alertDelay").toString()) * 60 * 1000));
				Long beginTime = createTime - delayMillisecond;
				Calendar cal = Calendar.getInstance();
				if (createTime - delayMillisecond < System.currentTimeMillis()) {
					beginTime = System.currentTimeMillis() + 1000 * 10;
				} else {
					cal.setTimeInMillis(beginTime);
					Map<String, Object> map1 = new HashMap<String, Object>();
					map1.put("id", map.get("id").toString());
					map1.put("userId", contextDTO.getUserId().toString());
					map1.put("dbId", contextDTO.getDbId().toString());
					String cronExpression = ToolDate.buildQuartzCron(cal.getTime());
					LOG.info("calendar-" + contextDTO.getDbId() + "_" + map1.get("id") + " 推送定时 :" + cronExpression);
					QuartzKit.addJob("calendar-" + contextDTO.getDbId() + "_" + map.get("id"), CalendarInfoJob.class, cronExpression, map1);
				}
			} else {
				QuartzKit.removeJob("calendar-" + contextDTO.getDbId() + "_" + map.get("id"));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
