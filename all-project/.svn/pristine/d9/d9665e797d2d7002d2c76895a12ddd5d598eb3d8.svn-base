package saas.winbons.run;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.springframework.context.event.SimpleApplicationEventMulticaster;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.CriteriaDefinition;
import org.springframework.data.mongodb.core.query.Query;

import com.mongodb.DBObject;
import com.mongodb.gridfs.GridFSDBFile;

import saas.winbons.data.model.base.UserImportEvent;
import saas.winbons.dubbo.api.ApiService;
import saas.winbons.dubbo.api.ContextDTO;
import saas.winbons.dubbo.api.FilterDTO;
import saas.winbons.dubbo.api.RequestDTO;
import saas.winbons.dubbo.api.ResultDTO;
import saas.winbons.framework.nosql.CustomGridFsTemplate;
import saas.winbons.framework.nosql.CustomMongoTemplate;
import saas.winbons.framework.service.ServiceLocator;
import saas.winbons.framework.tools.ToolGson;
import saas.winbons.jfinal.JfinalCoreInit;

public class StartUp {
	
	private static volatile boolean running = true;
	
	private static ContextDTO contextDTO = new ContextDTO();

	public static void main(String[] args) throws IOException, InterruptedException {
		ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("classpath:spring/*.xml");
		ServiceLocator.setApplicationContext(applicationContext);
		applicationContext.start();
		new JfinalCoreInit();
		contextDTO.setDbId(12053435L);
		contextDTO.setUserId(100000098808L);
		contextDTO.setAdmin(false);
		contextDTO.setCurrentOwnerId(100000098808L);
		contextDTO.setMobileRequest(false);
		contextDTO.setUserName("15989339812");
		contextDTO.setLoginId("15989339812");
		
		contextDTO.setServiceType(7);
		
		newGetImportStatus();
		//newImportUser();
		//poiExecl();
		
		Runtime.getRuntime().addShutdownHook(new Thread() {
			public void run() {
				synchronized (StartUp.class) {
					running = false;
					StartUp.class.notify();
				}
			}
		});
		synchronized (StartUp.class) {
			while (running) {
				try {
					StartUp.class.wait();
				} catch (Throwable e) {
				}
			}
		}

	}
	
	private static void  newImportUser(){
		ApiService service = (ApiService)ServiceLocator.getService("backendService");
		RequestDTO requestDto = new RequestDTO(contextDTO,"newImportUser");
		requestDto.put("importLogModel.importfile", "578703dbe4b044f02095d3c4");
		requestDto.put("importLogModel.importtype", "5");
		ResultDTO executeDto = service.executeDto(requestDto);
		System.out.println(ToolGson.GsonString(executeDto));
	}
	
	private static void  newGetImportStatus(){
		ApiService service = (ApiService)ServiceLocator.getService("backendService");
		RequestDTO requestDto = new RequestDTO(contextDTO,"newGetImportStatus");
		requestDto.putFitler(new FilterDTO("importfile", "578703dbe4b044f02095d3c4", "="));
		requestDto.putFitler(new FilterDTO("importtype", "5", "="));
		
		
		
		ResultDTO executeDto = service.executeDto(requestDto);
		System.out.println(ToolGson.GsonString(executeDto));
	}
	
	
	private static void poiExecl(){
		Map<String,Object> source = new HashMap<String,Object>();
		source.put("data", 120535332515L);
		source.put("contextDTO", contextDTO);
		UserImportEvent userImportEvent = new UserImportEvent(source);
		SimpleApplicationEventMulticaster simpleApplicationEventMulticaster = (SimpleApplicationEventMulticaster)ServiceLocator.getService("applicationEventMulticaster");
		simpleApplicationEventMulticaster.multicastEvent(userImportEvent);
	}
	

}
