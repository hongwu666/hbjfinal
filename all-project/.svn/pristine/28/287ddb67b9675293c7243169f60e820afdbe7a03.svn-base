package saas.winbons.run;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.springframework.context.support.ClassPathXmlApplicationContext;

import saas.winbons.dubbo.api.ApiService;
import saas.winbons.dubbo.api.ContextDTO;
import saas.winbons.dubbo.api.RequestDTO;
import saas.winbons.dubbo.api.ResultDTO;
import saas.winbons.framework.service.ServiceLocator;
import saas.winbons.framework.tools.ToolGson;
import saas.winbons.jfinal.JfinalCoreInit;

public class StartUp {

	private static volatile boolean running = true;
	
	private static ContextDTO contextDTO = new ContextDTO();
	
	public static void main(String[] args) throws IOException, InterruptedException {
		ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("classpath:spring/*.xml");
		ServiceLocator.setApplicationContext(applicationContext);
		applicationContext.start();
		new JfinalCoreInit();
		
		/*contextDTO.setDbId(12053435L);
		contextDTO.setUserId(100000053496L);
		contextDTO.setAdmin(false);
		contextDTO.setCurrentOwnerId(100000053496L);
		contextDTO.setMobileRequest(false);*/
		
/*		contextDTO.setDbId(12053364L);
		contextDTO.setUserId(100000099203L);
		contextDTO.setAdmin(true);
		contextDTO.setCurrentOwnerId(100000099203L);
		contextDTO.setMobileRequest(false);*/
		
		
		/*IM*/
		contextDTO.setDbId(12053190L);
		contextDTO.setUserId(100000081595L);
		contextDTO.setAdmin(true);
		contextDTO.setCurrentOwnerId(100000081595L);
		contextDTO.setMobileRequest(false);
		
		
		System.out.println("服务已经启动...");
		
		
		//calendarSave();
		
		/*ContextDTO contextDTO = new ContextDTO();
		contextDTO.setDbId(11001883L);
		contextDTO.setUserId(100000133687L);
		contextDTO.setAdmin(true);
		contextDTO.setCurrentOwnerId(100000023585L);
		contextDTO.setMobileRequest(false);
		
		SimpleApplicationEventMulticaster applicationEventMulticaster = (SimpleApplicationEventMulticaster) ServiceLocator.getService("applicationEventMulticaster");
		//处理地图
		Map<String, Object> source = new HashMap<String,Object>();
		
		Map<String, Object> map = new HashMap<String,Object>();
		map.put("attr", "重庆市江北区宏帆路悦湾北区(公交站)");
		map.put("id", "120534926416");
		source.put("data", map);
		source.put("contextDTO", contextDTO);
		//applicationEventMulticaster.multicastEvent(new CustomerLoactionEvent(source));
		
		ToolEvent.multicastEvent(new ApplicationEvent("") {});
		ApiService service = (ApiService)ServiceLocator.getService("analysisService");
		
		
		RequestDTO requestDto = new RequestDTO(contextDTO,"analysisListView");
		PageDto pageDto = new PageDto();
		pageDto.setLimit(40);
		pageDto.setRowStart(1);
		requestDto.put("page", pageDto);
		
		String gsonString = ToolGson.GsonString(requestDto);
		requestDto = ToolGson.GsonToBean(gsonString, RequestDTO.class);
		
		ResultDTO executeDto = service.executeDto(requestDto);
		System.out.println(ToolGson.GsonString(requestDto));
		System.out.println(ToolGson.GsonString(executeDto));*/
		
	/*	
		RequestDTO requestDto = new RequestDTO(contextDTO,"updateAnalysisSetting");
		Map<Object, Object> data = new HashMap<Object, Object>();
		data.put("analysisSetting.module", "customer");
		data.put("analysisSetting.userId", "100000023585");
		data.put("analysisSetting.fieldType", "listAnalysis");
		data.put("analysisSetting.fieldName", "industry"); 	
		data.put("analysisSetting.available", true);
		requestDto.put(data);
		ResultDTO executeDto = service.executeDto(requestDto);
		System.out.println(ToolGson.GsonString(requestDto));
		System.out.println(ToolGson.GsonString(executeDto));
		requestDto.clear();
		
		
		data.put("analysisSetting.module", "customer");
		data.put("analysisSetting.userId", "100000023585");
		data.put("analysisSetting.fieldType", "departAnalysis");
		data.put("analysisSetting.fieldName", "departAnalysis"); 	
		data.put("analysisSetting.available", false);
		requestDto.put(data);
		executeDto = service.executeDto(requestDto);
		System.out.println(ToolGson.GsonString(requestDto));
		System.out.println(ToolGson.GsonString(executeDto));
		requestDto.clear();
		
		
		
		requestDto = new RequestDTO(contextDTO,"getAnalysisSetting");
		List<FilterDTO> listFilterDTO = new ArrayList<FilterDTO>();
		listFilterDTO.add(new FilterDTO("module", "customer"));
		listFilterDTO.add(new FilterDTO("userId", "100000023585"));
		requestDto.putAllFitler(listFilterDTO);
		executeDto = service.executeDto(requestDto);
		System.out.println(ToolGson.GsonString(requestDto));
		System.out.println(ToolGson.GsonString(executeDto));
		
		
		requestDto = new RequestDTO(contextDTO,"updateAnalysisSort");*/
		
		
		
		
	/*	
		ApiService service = (ApiService)ServiceLocator.getService("analysisService");
		ContextDTO contextDTO = new ContextDTO();
		contextDTO.setDbId(11000341L);
		contextDTO.setUserId(100000023585L);
		contextDTO.setAdmin(true);
		contextDTO.setCurrentOwnerId(100000023585L);
		contextDTO.setMobileRequest(false);
		
		RequestDTO requestDto = new RequestDTO(contextDTO,"departAnalysis");
		List<FilterDTO> listFilterDTO = new ArrayList<FilterDTO>();
		FilterDTO filterDTO = new FilterDTO("owner_id","1427145064105","in");
		filterDTO.setValues(new Object[]{"100000023585"});
		//listFilterDTO.add(filterDTO);
		listFilterDTO.add(new FilterDTO("created_date","1427145064105",">="));
		listFilterDTO.add(new FilterDTO("created_date","1451175015951","<"));
		listFilterDTO.add(new FilterDTO("tcity","广","like"));
		requestDto.putAllFitler(listFilterDTO);
		
		
		
		ResultDTO executeDto = service.executeDto(requestDto);
		System.out.println(ToolGson.GsonString(requestDto));
		System.out.println(ToolGson.GsonString(executeDto));
		
		
		requestDto.setMethod("departChangeTrendAnalysis");
		executeDto = service.executeDto(requestDto);
		System.out.println(ToolGson.GsonString(requestDto));
	    System.out.println(ToolGson.GsonString(executeDto));
	    
	    
	    requestDto.setMethod("userAnalysis");
		executeDto = service.executeDto(requestDto);
		System.out.println(ToolGson.GsonString(requestDto));
	    System.out.println(ToolGson.GsonString(executeDto));
	    
	    
	    requestDto.setMethod("userChangeTrendAnalysis");
  		executeDto = service.executeDto(requestDto);
		System.out.println(ToolGson.GsonString(requestDto));
  	    System.out.println(ToolGson.GsonString(executeDto));
		
  	    
  	   requestDto.setMethod("listAnalysis");
  	   requestDto.put("statistics", "[\"industry\",\"source\"]");
  	   requestDto.put("analysisBy", 1);
 		executeDto = service.executeDto(requestDto);
  		System.out.println(ToolGson.GsonString(requestDto));
  	    System.out.println(ToolGson.GsonString(executeDto));*/
		
		//ToolEvent.multicastEvent(new CalendarInfoEvent(""));

		Runtime.getRuntime().addShutdownHook(new Thread() {
			public void run() {
				synchronized (StartUp.class) {
					running = false;
					StartUp.class.notify();
				}
			}
		});
		synchronized (StartUp.class) {
			while (running) {
				try {
					StartUp.class.wait();
				} catch (Throwable e) {
				}
			}
		}
	}
	
	
	private static void calendarSave(){
		ApiService service = (ApiService)ServiceLocator.getService("calendarMinaService");
		RequestDTO requestDto = new RequestDTO(contextDTO,"save");
		Map<Object, Object> data = new HashMap<Object, Object>();
		data.put("calendar.startTime", System.currentTimeMillis() + 1000 * 10);
		data.put("calendar.allDay", true);
		data.put("calendar.title", "121212");
		data.put("calendar.alert", true); 	
		data.put("calendar.alertDelay", 0);
		data.put("calendar.repeatAble", false);
		data.put("calendar.ownerId", "100000081595");
		requestDto.put(data);
		System.out.println(ToolGson.GsonString(requestDto));
		ResultDTO executeDto = service.executeDto(requestDto);

		//System.out.println(ToolGson.GsonString(executeDto));
		
	}

}
