package saas.monitor.tools.security;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.shiro.authc.AccountException;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authc.credential.HashedCredentialsMatcher;
import org.apache.shiro.authz.AuthorizationException;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import saas.monitor.mvc.base.BaseModel;
import saas.monitor.mvc.security.AuthorityResource;
import saas.monitor.mvc.security.Role;
import saas.monitor.mvc.security.User;
import com.jfinal.ext.kit.ModelKit;

public class ShiroAuthorizingRealm extends AuthorizingRealm {
	
	private static Logger log = LoggerFactory.getLogger(ShiroAuthorizingRealm.class);

	
	/**
	 * 构造函数，设置安全的初始化信息
	 */
	public ShiroAuthorizingRealm() {
		super();
		setAuthenticationTokenClass(UsernamePasswordToken.class);
		/*HashedCredentialsMatcher matcher = new HashedCredentialsMatcher(User.HASH_ALGORITHM);
		matcher.setHashIterations(User.HASH_INTERATIONS);
		setCredentialsMatcher(matcher);*/
	}
	
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
		SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
		//获取当前登录的用户名
		ShiroPrincipal subject = (ShiroPrincipal)super.getAvailablePrincipal(principals);
		String username = subject.getUsername();
		log.info("username:" + username);
		try {
			if(!subject.isAuthorized()) {
				/*//根据用户名称，获取该用户所有的权限列表
				List<String> authorities = AuthorityResource.dao.getAuthoritiesNameByRoleId(subject.getId(),roleId);
				subject.setAuthorities(authorities);
				//subject.setResources(AuthorityResource.dao.getAuthorityResourceByRoleId(roleId));
				subject.setAuthorized(true);
				log.info("用户【" + username + "】授权初始化成功......");
				log.info("用户【" + username + "】 权限列表为：" + subject.getAuthorities());*/
			}
		} catch(RuntimeException e) {
			throw new AuthorizationException("用户【" + username + "】授权失败");
		}
		//给当前用户设置权限
		info.addStringPermissions(subject.getAuthorities());
		return info;
	}

	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
		UsernamePasswordToken upToken = (UsernamePasswordToken) token;
		String username = upToken.getUsername();
		if (username == null) {
			log.warn("用户名不能为空");
			throw new AccountException("用户名不能为空");
		}
		User user = null;
		try {
			user = User.dao.getByName(username);
		} catch(Exception ex) {
			ex.printStackTrace();
			log.warn("获取用户失败\n" + ex.getMessage());
		}if (user == null) {
		    log.warn("用户不存在");
		    throw new UnknownAccountException("用户不存在");
		}
		//byte[] salt = ToolEncode.hexDecode(user.getStr("salt"));
		ShiroPrincipal subject = new ShiroPrincipal(user);
		List<String> codes = new ArrayList<String>();
		List<Map<String,Object>> resources = new ArrayList<Map<String,Object>>();
		subject.setAuthorities(codes);
		subject.setAuthorized(true);
		subject.setResources(resources);
		subject.setUser(user);
		
		
		/*开发环境的问题*/
		/*User user = new User();
		user.set("用户类型", 1);
		user.set("用户ID", "admin");
		user.set("密码", "123456");
		ShiroPrincipal subject = new ShiroPrincipal(user);
		List<String> authorities = new ArrayList<String>();
		for(int i = 33;i<56;i++){
			authorities.add("00" + i);
		}
		subject.setAuthorities(authorities);*/
		
		
		//subject.setResources(AuthorityResource.dao.getAuthorityResourceByRoleId(roleId));
		return new SimpleAuthenticationInfo(subject, user.get("loginPassword"), null, getName());
	}

}
